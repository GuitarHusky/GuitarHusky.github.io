<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guitar Husky Blog</title>
  
  <subtitle>Web 前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guitarhusky.github.io/"/>
  <updated>2017-11-13T13:20:09.781Z</updated>
  <id>https://guitarhusky.github.io/</id>
  
  <author>
    <name>Guitar Husky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://guitarhusky.github.io/2017/11/13/header/"/>
    <id>https://guitarhusky.github.io/2017/11/13/header/</id>
    <published>2017-11-13T13:19:24.215Z</published>
    <updated>2017-11-13T13:20:09.781Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image/html5.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image/html5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node</title>
    <link href="https://guitarhusky.github.io/2017/11/10/Node/"/>
    <id>https://guitarhusky.github.io/2017/11/10/Node/</id>
    <published>2017-11-10T13:21:51.682Z</published>
    <updated>2017-11-13T13:14:45.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p><img src="image/node.jpg" alt=""></p><h2 id="Node是一个JavaScript运行时环境，用来编写后台服务器处理程序。可与PHP、Java比肩的强大编程语言，它更多的是底层实现原理，怎么创建服务器，怎么跳转路径等等。是一门比较灵活的语言，客观的说不适合新手用来入门服务端。"><a href="#Node是一个JavaScript运行时环境，用来编写后台服务器处理程序。可与PHP、Java比肩的强大编程语言，它更多的是底层实现原理，怎么创建服务器，怎么跳转路径等等。是一门比较灵活的语言，客观的说不适合新手用来入门服务端。" class="headerlink" title="Node是一个JavaScript运行时环境，用来编写后台服务器处理程序。可与PHP、Java比肩的强大编程语言，它更多的是底层实现原理，怎么创建服务器，怎么跳转路径等等。是一门比较灵活的语言，客观的说不适合新手用来入门服务端。"></a>Node是一个JavaScript运行时环境，用来编写后台服务器处理程序。可与PHP、Java比肩的强大编程语言，它更多的是底层实现原理，怎么创建服务器，怎么跳转路径等等。是一门比较灵活的语言，客观的说不适合新手用来入门服务端。</h2><h3 id="Node的内置模块"><a href="#Node的内置模块" class="headerlink" title="Node的内置模块"></a>Node的内置模块</h3><p><strong>fs文件操作模块</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步读取</span></div><div class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"异步读取: "</span> + data.toString());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 同步读取</span></div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"同步读取: "</span> + data.toString());</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</div></pre></td></tr></table></figure><p><strong>http服务器操作模块</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 创建服务器</span></div><div class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;  </div><div class="line">   <span class="comment">// 解析请求，包括文件名</span></div><div class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">   </div><div class="line">   <span class="comment">// 输出请求的文件名</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">   </div><div class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></div><div class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">         <span class="built_in">console</span>.log(err);</div><div class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></div><div class="line">         <span class="comment">// Content Type: text/plain</span></div><div class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;             </div><div class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></div><div class="line">         <span class="comment">// Content Type: text/plain</span></div><div class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);    </div><div class="line">         </div><div class="line">         <span class="comment">// 响应文件内容</span></div><div class="line">         response.write(data.toString());        </div><div class="line">      &#125;</div><div class="line">      <span class="comment">//  发送响应数据</span></div><div class="line">      response.end();</div><div class="line">   &#125;);   </div><div class="line">&#125;).listen(<span class="number">8081</span>);</div><div class="line"></div><div class="line"><span class="comment">// 控制台会输出以下信息</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure><p><strong>path文件操作模块</strong></p><blockquote><table><thead><tr><th>1</th><th><strong>path.normalize(p)</strong>规范化路径，注意’..’ 和 ‘.’。</th></tr></thead><tbody><tr><td>2</td><td><strong>path.join([path1][, path2][, …])</strong>用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”。</td></tr><tr><td>3</td><td><strong>path.resolve([from …], to)</strong>将 <strong>to</strong> 参数解析为绝对路径。</td></tr><tr><td>4</td><td><strong>path.isAbsolute(path)</strong>判断参数 <strong>path</strong> 是否是绝对路径。</td></tr><tr><td>5</td><td><strong>path.relative(from, to)</strong>用于将相对路径转为绝对路径。</td></tr><tr><td>6</td><td><strong>path.dirname(p)</strong>返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。</td></tr><tr><td>7</td><td><strong>path.basename(p[, ext])</strong>返回路径中的最后一部分。同 Unix 命令 bashname 类似。</td></tr><tr><td>8</td><td><strong>path.extname(p)</strong>返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。</td></tr><tr><td>9</td><td><strong>path.parse(pathString)</strong>返回路径字符串的对象。</td></tr><tr><td>10</td><td><strong>path.format(pathObject)</strong>从对象中返回路径字符串，和 path.parse 相反。</td></tr></tbody></table></blockquote><p><strong>os操作系统模块</strong></p><blockquote><table><thead><tr><th>1</th><th><strong>os.tmpdir()</strong>返回操作系统的默认临时文件夹。</th></tr></thead><tbody><tr><td>2</td><td><strong>os.endianness()</strong>返回 CPU 的字节序，可能的是 “BE” 或 “LE”。</td></tr><tr><td>3</td><td><strong>os.hostname()</strong>返回操作系统的主机名。</td></tr><tr><td>4</td><td><strong>os.type()</strong>返回操作系统名</td></tr><tr><td>5</td><td><strong>os.platform()</strong>返回操作系统名</td></tr><tr><td>6</td><td><strong>os.arch()</strong>返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。</td></tr><tr><td>7</td><td><strong>os.release()</strong>返回操作系统的发行版本。</td></tr><tr><td>8</td><td><strong>os.uptime()</strong>返回操作系统运行的时间，以秒为单位。</td></tr><tr><td>9</td><td><strong>os.loadavg()</strong>返回一个包含 1、5、15 分钟平均负载的数组。</td></tr><tr><td>10</td><td><strong>os.totalmem()</strong>返回系统内存总量，单位为字节。</td></tr><tr><td>11</td><td><strong>os.freemem()</strong>返回操作系统空闲内存量，单位是字节。</td></tr><tr><td>12</td><td><strong>os.cpus()</strong>返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。</td></tr><tr><td>13</td><td><strong>os.networkInterfaces()</strong>获得网络接口列表。</td></tr></tbody></table></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;image/node.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Node
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue.js</title>
    <link href="https://guitarhusky.github.io/2017/11/10/Vue/"/>
    <id>https://guitarhusky.github.io/2017/11/10/Vue/</id>
    <published>2017-11-10T13:19:03.035Z</published>
    <updated>2017-11-13T13:15:34.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p><img src="image/vue.png" alt=""></p><h2 id="Vue-js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统"><a href="#Vue-js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统" class="headerlink" title="Vue.js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统"></a>Vue.js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统</h2><h3 id="v"><a href="#v" class="headerlink" title="v-"></a>v-</h3><h3 id="1-声明式渲染"><a href="#1-声明式渲染" class="headerlink" title="1.声明式渲染"></a>1.声明式渲染</h3><h5 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h5><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  &#123;&#123; message &#125;&#125;      //hello Vue</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'hello Vue'</span></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><h4 id="v-bind-title-属性值绑定提示信息"><a href="#v-bind-title-属性值绑定提示信息" class="headerlink" title="v-bind:title 属性值绑定提示信息"></a>v-bind:title 属性值绑定提示信息</h4><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app2'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">'message'</span>&gt;</span></div><div class="line">  鼠标悬停，查看此处动态绑定的提示信息</div><div class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app2'</span>,</div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'页面加载于'</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()    <span class="comment">//当前系统时间</span></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="v-等前缀的属性成为指令-v-bind-v-on…-表示为Vue提供的特殊属性"><a href="#v-等前缀的属性成为指令-v-bind-v-on…-表示为Vue提供的特殊属性" class="headerlink" title="v- 等前缀的属性成为指令(v-bind,v-on…),表示为Vue提供的特殊属性"></a>v- 等前缀的属性成为指令(v-bind,v-on…),表示为Vue提供的特殊属性</h4><h3 id="2-条件与循环"><a href="#2-条件与循环" class="headerlink" title="2.条件与循环"></a>2.条件与循环</h3><h3 id="v-if-条件属性"><a href="#v-if-条件属性" class="headerlink" title="v-if  条件属性"></a>v-if  条件属性</h3></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app3'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">'seen'</span>&gt;</span>可以看到的文字内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app3'</span>,</div><div class="line">  data: &#123;</div><div class="line">    seen: <span class="literal">true</span>     <span class="comment">//通过 app.seen 修改seen属性的值来决定显示与隐藏</span></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h5 id="v-for-循环绑定数组数据渲染列表"><a href="#v-for-循环绑定数组数据渲染列表" class="headerlink" title="v-for 循环绑定数组数据渲染列表"></a>v-for 循环绑定数组数据渲染列表</h5></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'todo in todos'</span>&gt;</span></div><div class="line">        &#123;&#123;  todo.text &#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">//页面显示</div><div class="line">// 1.hello</div><div class="line">   2.Vue.js</div><div class="line">   3.first day</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#app'</span>,</div><div class="line">    data: &#123;</div><div class="line">      todos: [</div><div class="line">        &#123; <span class="attr">text</span>: <span class="string">'hello'</span> &#125;,</div><div class="line">        &#123; <span class="attr">text</span>: <span class="string">'Vue.js'</span> &#125;,</div><div class="line">        &#123; <span class="attr">text</span>: <span class="string">'first day'</span> &#125;</div><div class="line">      ]       <span class="comment">//可以通过app.todos.push(&#123; text:'新增数据' &#125;)来添加列                                                             表项</span></div><div class="line">    &#125;  </div><div class="line">  &#125;)</div></pre></td></tr></table></figure><h4 id="Vue提供了一个强大的过渡效果系统，可以在Vue插入-更新-删除元素时自动应用过渡效果"><a href="#Vue提供了一个强大的过渡效果系统，可以在Vue插入-更新-删除元素时自动应用过渡效果" class="headerlink" title="Vue提供了一个强大的过渡效果系统，可以在Vue插入/更新/删除元素时自动应用过渡效果"></a>Vue提供了一个强大的过渡效果系统，可以在Vue插入/更新/删除元素时自动应用过渡效果</h4><h5 id="使用-v-on-指令绑定一个事件监听器，通过它调用在Vue实例中定义-v-on-事件类型名称-’实例中定义的事件处理函数名’"><a href="#使用-v-on-指令绑定一个事件监听器，通过它调用在Vue实例中定义-v-on-事件类型名称-’实例中定义的事件处理函数名’" class="headerlink" title="使用 v-on 指令绑定一个事件监听器，通过它调用在Vue实例中定义( v-on:事件类型名称=’实例中定义的事件处理函数名’ )"></a>使用 v-on 指令绑定一个事件监听器，通过它调用在Vue实例中定义( v-on:事件类型名称=’实例中定义的事件处理函数名’ )</h5></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  //调用Vue实例中的方法</div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'reverseMessage'</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;</div><div class="line">        message: <span class="string">'Hello Vue.js'</span></div><div class="line">      &#125;,</div><div class="line">      methods: &#123;</div><div class="line">        reverseMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">this</span>.message =  <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">          <span class="comment">//将字符串反转</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></li></ul><h3 id="3-v-model-指令，实现表单输入与应用状态之间的双向绑定"><a href="#3-v-model-指令，实现表单输入与应用状态之间的双向绑定" class="headerlink" title="3.v-model 指令，实现表单输入与应用状态之间的双向绑定"></a>3.v-model 指令，实现表单输入与应用状态之间的双向绑定</h3><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'message'</span>&gt;</span>   //表单元素与p标签绑定相同数据  实现同步变化</div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;</div><div class="line">        message: <span class="string">'Hello Vue.js'</span>    </div><div class="line">      &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></li></ul><h3 id="4-组件化应用构建"><a href="#4-组件化应用构建" class="headerlink" title="4.组件化应用构建"></a>4.组件化应用构建</h3><h5 id="组件系统是Vue的另一个重要概念，是抽象的，可以将应用界面抽象为一个组件树"><a href="#组件系统是Vue的另一个重要概念，是抽象的，可以将应用界面抽象为一个组件树" class="headerlink" title="组件系统是Vue的另一个重要概念，是抽象的，可以将应用界面抽象为一个组件树"></a>组件系统是Vue的另一个重要概念，是抽象的，可以将应用界面抽象为一个组件树</h5><h6 id="在Vue中，一个组件本质上是一个拥有预定义选项的一个Vue实例，"><a href="#在Vue中，一个组件本质上是一个拥有预定义选项的一个Vue实例，" class="headerlink" title="在Vue中，一个组件本质上是一个拥有预定义选项的一个Vue实例，"></a>在Vue中，一个组件本质上是一个拥有预定义选项的一个Vue实例，</h6><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-7"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      现在我们为每个 todo-item 提供 todo 对象</span></div><div class="line"><span class="comment">      todo 对象是变量，即其内容可以是动态的。</span></div><div class="line"><span class="comment">      我们也需要为每个组件提供一个“key”。</span></div><div class="line"><span class="comment">    --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></div><div class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in groceryList"</span></span></div><div class="line"><span class="tag">      <span class="attr">v-bind:todo</span>=<span class="string">"item"</span></span></div><div class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'todo-item'</span>,&#123;</div><div class="line">      <span class="comment">// todo-item 组件现在接受一个‘prop’，</span></div><div class="line">      <span class="comment">// 类似自定义属性，属性名为todo</span></div><div class="line">      props: [<span class="string">'todo'</span>],</div><div class="line">      template:<span class="string">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;</div><div class="line">        groceryList: [</div><div class="line">          &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'蔬菜'</span>&#125;,</div><div class="line">          &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'奶酪'</span>&#125;,</div><div class="line">          &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'水果'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></li></ul><h3 id="5-Vue实例"><a href="#5-Vue实例" class="headerlink" title="5.Vue实例"></a>5.Vue实例</h3><h4 id="每个Vue应用都是通过-Vue-函数创建一个新的Vue实例开始的。"><a href="#每个Vue应用都是通过-Vue-函数创建一个新的Vue实例开始的。" class="headerlink" title="每个Vue应用都是通过 Vue 函数创建一个新的Vue实例开始的。"></a>每个Vue应用都是通过 Vue 函数创建一个新的Vue实例开始的。</h4><ul><li>一个Vue应用由一个通过 new Vue 创建的根Vue实例，以及可选的嵌套的、可复用的组件树组成。</li></ul><h4 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h4><ul><li>当一个Vue实例被创建时，它向Vue的响应式系统中加入了其<code>data</code>对象中能找到的所有的属性，当这些属性的值发生改变时，视图将会产生响应，即匹配更新为新的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我们的数据对象</span></div><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">//该对象被加入到一个 Vue 实例中</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: data</div><div class="line">  <span class="comment">//相当于  data: &#123; a: 1 &#125;</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//  vm.a === data.a   引用了相同的对象！</span></div><div class="line"> vm.a === data.a   <span class="comment">//  true</span></div><div class="line"> </div><div class="line"><span class="comment">//设置属性相当于修改原始数据</span></div><div class="line">vm.a = <span class="number">2</span>     <span class="comment">//  data.a ---&gt;  2</span></div><div class="line"><span class="comment">//修改 vm.a 或者 data.a 都相当于 修改原数据</span></div></pre></td></tr></table></figure><ul><li>当这些数据改变时，视图会进行重新渲染，（只有当实例被创建时 <code>data</code> 中存在的属性是响应式的），即没有被实例使用的数据的改动不会影响视图渲染，</li><li>如果想提前设置一个之后可能用到的属性，但一开始它为空或者不存在，需要设置初始值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">  newTodoText: <span class="string">''</span>,</div><div class="line">  visitCount: <span class="number">0</span>,</div><div class="line">  hideCompletedTodos: <span class="literal">false</span>,</div><div class="line">  todos: [],</div><div class="line">  error: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="除了data属性，Vue实例暴露了一些有用的实例属性和方法。它们都有前缀-以便与用户自定义的属性区分开来"><a href="#除了data属性，Vue实例暴露了一些有用的实例属性和方法。它们都有前缀-以便与用户自定义的属性区分开来" class="headerlink" title="除了data属性，Vue实例暴露了一些有用的实例属性和方法。它们都有前缀 $,以便与用户自定义的属性区分开来;"></a>除了data属性，Vue实例暴露了一些有用的实例属性和方法。它们都有前缀 <code>$</code>,以便与用户自定义的属性区分开来;</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#example'</span>,</div><div class="line">  data: data</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$data === data    <span class="comment">//true</span></div><div class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)    <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//#watch 是一个实例方法</span></div><div class="line">vm.$watch(<span class="string">'a'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>)</span>&#123;</div><div class="line">  <span class="comment">//这个回调函数在  vm.a 改变后调用</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="5-1实例生命周期"><a href="#5-1实例生命周期" class="headerlink" title="5.1实例生命周期"></a>5.1实例生命周期</h4><h5 id="每个Vue实例在被创建之前都要经过一系列的初始化过程，例如需要设置数据监听、编译模板、挂载实例到DOM、在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做-生命周期钩子-的函数-给予用户机会会在一些特定的场景下添加他们自己的代码"><a href="#每个Vue实例在被创建之前都要经过一系列的初始化过程，例如需要设置数据监听、编译模板、挂载实例到DOM、在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做-生命周期钩子-的函数-给予用户机会会在一些特定的场景下添加他们自己的代码" class="headerlink" title="每个Vue实例在被创建之前都要经过一系列的初始化过程，例如需要设置数据监听、编译模板、挂载实例到DOM、在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做 生命周期钩子 的函数,给予用户机会会在一些特定的场景下添加他们自己的代码."></a>每个Vue实例在被创建之前都要经过一系列的初始化过程，例如需要设置数据监听、编译模板、挂载实例到DOM、在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做 <code>生命周期钩子</code> 的函数,给予用户机会会在一些特定的场景下添加他们自己的代码.</h5><h6 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// created 钩子可以用来在一个实例被创建之后执行代码：</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  data:&#123;</div><div class="line">  a: 1</div><div class="line">  &#125;,</div><div class="line">  created: function () &#123;</div><div class="line">    //this 指向Vue实例</div><div class="line">  console.log('a is' + this.a)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h5 id="在实例生命周期不同的场景下调用，如mounted、updated、destroyed。钩子的this执行它的的Vue实例"><a href="#在实例生命周期不同的场景下调用，如mounted、updated、destroyed。钩子的this执行它的的Vue实例" class="headerlink" title="在实例生命周期不同的场景下调用，如mounted、updated、destroyed。钩子的this执行它的的Vue实例"></a>在实例生命周期不同的场景下调用，如<code>mounted</code>、<code>updated</code>、<code>destroyed</code>。钩子的<code>this</code>执行它的的Vue实例</h5><h3 id="6-模板语法"><a href="#6-模板语法" class="headerlink" title="6.模板语法"></a>6.模板语法</h3><blockquote><p>Vue.js 使用了基于HTML的模板语法，允许开发者声明式地将DOM 绑定至底层Vue实例的数据。所有的Vue.js 的模板都是合法的HTML，都能被遵循规范的浏览器和HTML解析器解析</p><p>在底层的实现上，Vue将模板编译成虚拟DOM 渲染函数，结合响应系统，在应用状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。</p><p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，<a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="external">直接写渲染 (render) 函数</a>，使用可选的 JSX 语法。    </p></blockquote><h3 id="6-1-插值"><a href="#6-1-插值" class="headerlink" title="6.1 插值"></a>6.1 插值</h3><h4 id="6-1-1-文本插值"><a href="#6-1-1-文本插值" class="headerlink" title="6.1.1 文本插值"></a>6.1.1 文本插值</h4><ul><li><p>数据绑定最常见的形式就是使用”Mustache”语法(双大括号)的文本插值            </p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><p>Mustache标签将会被替代为对应数据对象上<code>msg</code>属性的值。无论何时，绑定的数据对象上<code>msg</code>属性发生了改变，插值出的内容都会更新。 </p></li><li><p>通过使用 <code>v-once</code>指令，你也能执行一次性插值，当数据改变时，插值出的内容不会更新。但这也会影响到该阶段上所有的数据绑定:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;image/vue.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Vue-js的核心是一个允许采用简洁的模板
      
    
    </summary>
    
    
  </entry>
  
</feed>
